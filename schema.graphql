# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type AgeGroup {
    from: Int
    to: Int
}

type BroadcastMessage {
    _id: ID
    createdAt: DateTime
    description: String
    targetGroup: BroadcastMessageTargetGroup
    title: String
    updatedAt: DateTime
}

type BroadcastMessageTargetGroup {
    ageGroup: AgeGroup
    region: [String]
}

type CaseReport {
    _id: ID
    alternateContact: String
    createdAt: DateTime
    description: String
    location: String
    nearestLandmark: String
    reporting: Reporting
    updatedAt: DateTime
    user: User
}

type Contact {
    _id: ID
    bluetoothID: String
    createdAt: DateTime
    updatedAt: DateTime
}

type Location {
    "Coordinates is an array of lnglat"
    coordinates: [Float]
}

type LoginUserOutput {
    message: String!
    success: Boolean!
}

type Media {
    description: String
    mediaType: MediaType
    mediaURL: String
    title: String
}

type MobileToken {
    createdAt: DateTime!
    mobileToken: String!
    newUser: Boolean!
    updatedAt: DateTime!
    user: User
}

type Mutation {
    addTestingSite(input: addTestingSiteInput): TestingSite
    editUserProfile(input: editUserProfileInput!): User
    loginUser(input: loginUserInput): LoginUserOutput!
    recordVitals(input: recordVitalsInput): Vitals
    reportCase(input: reportCaseInput): CaseReport
    root: String
    saveMedia(input: saveMediaInput): Media
    sendBroadcastMessage(input: broadcastMessageInput): BroadcastMessage
    setUserNotificationToken(input: setUserNotificationTokenInput): SetUserNotificationTokenOutput!
    validateLoginUser(input: validateLoginUserInput): MobileToken!
}

type Query {
    broadcastMessages(filter: broadcastMessageFilter): [BroadcastMessage]
    contacts(user: ID): [Contact]
    media: [Media]
    memberProfile: User!
    reportedCases(filter: caseReportFilter): [CaseReport]
    resolveContact(contact: ID): Contact
    root: String
    testingSites(filter: testingSiteFilter): [TestingSite]
    userReportedCases(filter: caseReportFilter): [CaseReport]
    userVitals(filter: vitalsFilter): [Vitals]
    users: [User]
    vitals(filter: vitalsFilter): [Vitals]
}

type SetUserNotificationTokenOutput {
    success: Boolean!
    user: User!
}

type TestingSite {
    _id: ID
    address: String
    createdAt: DateTime
    location: Location
    name: String
    placesName: String
    updatedAt: DateTime
}

type User {
    _id: ID
    age: Int
    arrivalDate: Date
    bluetoothID: String
    caseName: String
    caseStatus: CaseStatus
    gender: Gender
    infectionStatus: InfectionStatus
    lastCountriesVisited: [String]
    lastName: String
    licenseNumber: String
    nationalID: String
    notificationToken: String
    otherNames: String
    phone: PhoneNumber
    platform: Platform
    region: String
}

type Vitals {
    _id: ID
    createdAt: DateTime
    location: Location
    updatedAt: DateTime
    user: User
    vitals: VitalsDetails
}

type VitalsDetails {
    aches: Int
    dryCough: Int
    fever: Int
    shortnessOfBreath: Int
    soreThroat: Int
    tiredness: Int
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}

enum CaseStatus {
    critical
    dead
    recovering
}

enum Gender {
    female
    male
}

enum InfectionStatus {
    negative
    positive
    untested
}

enum MediaType {
    audio
    video
}

enum Platform {
    android
    ios
    ussd
    web
}

enum Reporting {
    individual
    self
}

input LocationInput {
    latitude: Float!
    longitude: Float!
}

input VitalsInput {
    aches: Int
    dryCough: Int
    fever: Int
    shortnessOfBreath: Int
    soreThroat: Int
    tiredness: Int
}

input addTestingSiteInput {
    address: String!
    location: LocationInput
    name: String!
    placesName: String!
}

input ageGroupInput {
    from: Int
    to: Int
}

input broadcastMessageFilter {
    ageGroup: ageGroupInput
    description: String
    region: [String]
    title: String
}

input broadcastMessageInput {
    ageGroup: ageGroupInput
    description: String!
    region: [String]
    title: String!
}

input caseReportFilter {
    alternateContact: String
    description: String
    location: String
    nearestLandmark: String
    reporting: Reporting
    user: ID
}

input editUserProfileInput {
    age: Int
    arrivalDate: Date
    bluetoothID: String
    caseName: String
    gender: Gender
    lastCountriesVisited: [String]
    lastName: String
    licenseNumber: String
    nationalID: String
    notificationToken: String
    otherNames: String
    phone: PhoneNumber
    platform: Platform
}

input loginUserInput {
    phone: String!
}

input recordVitalsInput {
    location: LocationInput
    vitals: VitalsInput
}

input reportCaseInput {
    alternateContact: String
    description: String
    location: String
    nearestLandmark: String
    reporting: Reporting
}

input saveMediaInput {
    description: String
    mediaType: MediaType!
    mediaURL: String!
    title: String!
}

input setUserNotificationTokenInput {
    notificationToken: String!
}

input testingSiteFilter {
    address: String
    location: LocationInput
    name: String
    placesName: String
}

input validateLoginUserInput {
    otp: String!
    phone: String!
}

input vitalsFilter {
    user: ID
}


scalar Date

scalar PhoneNumber

scalar DateTime

scalar EmailAddress

scalar JSONObject

"The `Upload` scalar type represents a file upload."
scalar Upload
